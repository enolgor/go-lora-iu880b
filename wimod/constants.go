package wimod

const (
	DEVMGMT_ID byte = 0x01
	LORAWAN_ID byte = 0x10
)

const (
	DEVMGMT_MSG_PING_REQ              byte = 0x01
	DEVMGMT_MSG_PING_RSP              byte = 0x02
	DEVMGMT_MSG_GET_DEVICE_INFO_REQ   byte = 0x03
	DEVMGMT_MSG_GET_DEVICE_INFO_RSP   byte = 0x04
	DEVMGMT_MSG_GET_FW_INFO_REQ       byte = 0x05
	DEVMGMT_MSG_GET_FW_INFO_RSP       byte = 0x06
	DEVMGMT_MSG_RESET_REQ             byte = 0x07
	DEVMGMT_MSG_RESET_RSP             byte = 0x08
	DEVMGMT_MSG_SET_OPMODE_REQ        byte = 0x09
	DEVMGMT_MSG_SET_OPMODE_RSP        byte = 0x0A
	DEVMGMT_MSG_GET_OPMODE_REQ        byte = 0x0B
	DEVMGMT_MSG_GET_OPMODE_RSP        byte = 0x0C
	DEVMGMT_MSG_SET_RTC_REQ           byte = 0x0D
	DEVMGMT_MSG_SET_RTC_RSP           byte = 0x0E
	DEVMGMT_MSG_GET_RTC_REQ           byte = 0x0F
	DEVMGMT_MSG_GET_RTC_RSP           byte = 0x10
	DEVMGMT_MSG_GET_DEVICE_STATUS_REQ byte = 0x17
	DEVMGMT_MSG_GET_DEVICE_STATUS_RSP byte = 0x18
	DEVMGMT_MSG_SET_RTC_ALARM_REQ     byte = 0x31
	DEVMGMT_MSG_SET_RTC_ALARM_RSP     byte = 0x32
	DEVMGMT_MSG_CLEAR_RTC_ALARM_REQ   byte = 0x33
	DEVMGMT_MSG_CLEAR_RTC_ALARM_RSP   byte = 0x34
	DEVMGMT_MSG_GET_RTC_ALARM_REQ     byte = 0x35
	DEVMGMT_MSG_GET_RTC_ALARM_RSP     byte = 0x36
	DEVMGMT_MSG_RTC_ALARM_IND         byte = 0x38
)

const (
	DEVMGMT_STATUS_OK                byte = 0x00
	DEVMGMT_STATUS_ERROR             byte = 0x01
	DEVMGMT_STATUS_CMD_NOT_SUPPORTED byte = 0x02
	DEVMGMT_STATUS_WRONG_PARAMETER   byte = 0x03
)

const (
	DEVMGMT_OPMODE_STANDARD byte = 0x00
	DEVMGMT_OPMODE_CUSTOMER byte = 0x03
)

const (
	LORAWAN_MSG_ACTIVATE_DEVICE_REQ       byte = 0x01
	LORAWAN_MSG_ACTIVATE_DEVICE_RSP       byte = 0x02
	LORAWAN_MSG_SET_JOIN_PARAM_REQ        byte = 0x05
	LORAWAN_MSG_SET_JOIN_PARAM_RSP        byte = 0x06
	LORAWAN_MSG_JOIN_NETWORK_REQ          byte = 0x09
	LORAWAN_MSG_JOIN_NETWORK_RSP          byte = 0x0A
	LORAWAN_MSG_JOIN_NETWORK_TX_IND       byte = 0x0B
	LORAWAN_MSG_JOIN_NETWORK_IND          byte = 0x0C
	LORAWAN_MSG_SEND_UDATA_REQ            byte = 0x0D
	LORAWAN_MSG_SEND_UDATA_RSP            byte = 0x0E
	LORAWAN_MSG_SEND_UDATA_TX_IND         byte = 0x0F
	LORAWAN_MSG_RECV_UDATA_IND            byte = 0x10
	LORAWAN_MSG_SEND_CDATA_REQ            byte = 0x11
	LORAWAN_MSG_SEND_CDATA_RSP            byte = 0x12
	LORAWAN_MSG_SEND_CDATA_TX_IND         byte = 0x13
	LORAWAN_MSG_RECV_CDATA_IND            byte = 0x14
	LORAWAN_MSG_RECV_ACK_IND              byte = 0x15
	LORAWAN_MSG_RECV_NO_DATA_IND          byte = 0x16
	LORAWAN_MSG_SET_RSTACK_CONFIG_REQ     byte = 0x19
	LORAWAN_MSG_SET_RSTACK_CONFIG_RSP     byte = 0x1A
	LORAWAN_MSG_GET_RSTACK_CONFIG_REQ     byte = 0x1B
	LORAWAN_MSG_GET_RSTACK_CONFIG_RSP     byte = 0x1C
	LORAWAN_MSG_REACTIVATE_DEVICE_REQ     byte = 0x1D
	LORAWAN_MSG_REACTIVATE_DEVICE_RSP     byte = 0x1E
	LORAWAN_MSG_DEACTIVATE_DEVICE_REQ     byte = 0x21
	LORAWAN_MSG_DEACTIVATE_DEVICE_RSP     byte = 0x22
	LORAWAN_MSG_FACTORY_RESET_REQ         byte = 0x23
	LORAWAN_MSG_FACTORY_RESET_RSP         byte = 0x24
	LORAWAN_MSG_SET_DEVICE_EUI_REQ        byte = 0x25
	LORAWAN_MSG_SET_DEVICE_EUI_RSP        byte = 0x26
	LORAWAN_MSG_GET_DEVICE_EUI_REQ        byte = 0x27
	LORAWAN_MSG_GET_DEVICE_EUI_RSP        byte = 0x28
	LORAWAN_MSG_GET_NWK_STATUS_REQ        byte = 0x29
	LORAWAN_MSG_GET_NWK_STATUS_RSP        byte = 0x2A
	LORAWAN_MSG_SEND_MAC_CMD_REQ          byte = 0x2B
	LORAWAN_MSG_SEND_MAC_CMD_RSP          byte = 0x2C
	LORAWAN_MSG_RECV_MAC_CMD_IND          byte = 0x2D
	LORAWAN_MSG_SET_CUSTOM_CFG_REQ        byte = 0x31
	LORAWAN_MSG_SET_CUSTOM_CFG_RSP        byte = 0x32
	LORAWAN_MSG_GET_CUSTOM_CFG_REQ        byte = 0x33
	LORAWAN_MSG_GET_CUSTOM_CFG_RSP        byte = 0x34
	LORAWAN_MSG_GET_SUPPORTED_BANDS_REQ   byte = 0x35
	LORAWAN_MSG_GET_SUPPORTED_BANDS_RSP   byte = 0x36
	LORAWAN_MSG_SET_LINKADRREQ_CONFIG_REQ byte = 0x3B
	LORAWAN_MSG_SET_LINKADRREQ_CONFIG_RSP byte = 0x3C
	LORAWAN_MSG_GET_LINKADRREQ_CONFIG_REQ byte = 0x3D
	LORAWAN_MSG_GET_LINKADRREQ_CONFIG_RSP byte = 0x3E
)

const (
	LORAWAN_STATUS_OK                    byte = 0x00
	LORAWAN_STATUS_ERROR                 byte = 0x01
	LORAWAN_STATUS_CMD_NOT_SUPPORTED     byte = 0x02
	LORAWAN_STATUS_WRONG_PARAMETER       byte = 0x03
	LORAWAN_STATUS_WRONG_DEVICE_MODE     byte = 0x04
	LORAWAN_STATUS_DEVICE_NOT_ACTIVATED  byte = 0x05
	LORAWAN_STATUS_DEVICE_BUSY           byte = 0x06
	LORAWAN_STATUS_QUEUE_FULL            byte = 0x07
	LORAWAN_STATUS_LENGTH_ERROR          byte = 0x08
	LORAWAN_STATUS_NO_FACTORY_SETTINGS   byte = 0x09
	LORAWAN_STATUS_CHANNEL_BLOCKED       byte = 0x0A
	LORAWAN_STATUS_CHANNEL_NOT_AVAILABLE byte = 0x0B
)

const (
	MSG_REQ byte = 0x00
	MSG_RSP byte = 0x01
	MSG_IND byte = 0x02
)

var MSG_TYPES = map[uint16]byte{
	(uint16(DEVMGMT_ID) << 8) + uint16(DEVMGMT_MSG_PING_REQ):              MSG_REQ,
	(uint16(DEVMGMT_ID) << 8) + uint16(DEVMGMT_MSG_PING_RSP):              MSG_RSP,
	(uint16(DEVMGMT_ID) << 8) + uint16(DEVMGMT_MSG_GET_DEVICE_INFO_REQ):   MSG_REQ,
	(uint16(DEVMGMT_ID) << 8) + uint16(DEVMGMT_MSG_GET_DEVICE_INFO_RSP):   MSG_RSP,
	(uint16(DEVMGMT_ID) << 8) + uint16(DEVMGMT_MSG_GET_FW_INFO_REQ):       MSG_REQ,
	(uint16(DEVMGMT_ID) << 8) + uint16(DEVMGMT_MSG_GET_FW_INFO_RSP):       MSG_RSP,
	(uint16(DEVMGMT_ID) << 8) + uint16(DEVMGMT_MSG_RESET_REQ):             MSG_REQ,
	(uint16(DEVMGMT_ID) << 8) + uint16(DEVMGMT_MSG_RESET_RSP):             MSG_RSP,
	(uint16(DEVMGMT_ID) << 8) + uint16(DEVMGMT_MSG_SET_OPMODE_REQ):        MSG_REQ,
	(uint16(DEVMGMT_ID) << 8) + uint16(DEVMGMT_MSG_SET_OPMODE_RSP):        MSG_RSP,
	(uint16(DEVMGMT_ID) << 8) + uint16(DEVMGMT_MSG_GET_OPMODE_REQ):        MSG_REQ,
	(uint16(DEVMGMT_ID) << 8) + uint16(DEVMGMT_MSG_GET_OPMODE_RSP):        MSG_RSP,
	(uint16(DEVMGMT_ID) << 8) + uint16(DEVMGMT_MSG_SET_RTC_REQ):           MSG_REQ,
	(uint16(DEVMGMT_ID) << 8) + uint16(DEVMGMT_MSG_SET_RTC_RSP):           MSG_RSP,
	(uint16(DEVMGMT_ID) << 8) + uint16(DEVMGMT_MSG_GET_RTC_REQ):           MSG_REQ,
	(uint16(DEVMGMT_ID) << 8) + uint16(DEVMGMT_MSG_GET_RTC_RSP):           MSG_RSP,
	(uint16(DEVMGMT_ID) << 8) + uint16(DEVMGMT_MSG_GET_DEVICE_STATUS_REQ): MSG_REQ,
	(uint16(DEVMGMT_ID) << 8) + uint16(DEVMGMT_MSG_GET_DEVICE_STATUS_RSP): MSG_RSP,
	(uint16(DEVMGMT_ID) << 8) + uint16(DEVMGMT_MSG_SET_RTC_ALARM_REQ):     MSG_REQ,
	(uint16(DEVMGMT_ID) << 8) + uint16(DEVMGMT_MSG_SET_RTC_ALARM_RSP):     MSG_RSP,
	(uint16(DEVMGMT_ID) << 8) + uint16(DEVMGMT_MSG_CLEAR_RTC_ALARM_REQ):   MSG_REQ,
	(uint16(DEVMGMT_ID) << 8) + uint16(DEVMGMT_MSG_CLEAR_RTC_ALARM_RSP):   MSG_RSP,
	(uint16(DEVMGMT_ID) << 8) + uint16(DEVMGMT_MSG_GET_RTC_ALARM_REQ):     MSG_REQ,
	(uint16(DEVMGMT_ID) << 8) + uint16(DEVMGMT_MSG_GET_RTC_ALARM_RSP):     MSG_RSP,
	(uint16(DEVMGMT_ID) << 8) + uint16(DEVMGMT_MSG_RTC_ALARM_IND):         MSG_IND,
}

var alarmConstructors = map[uint16]func() WiModMessageInd{
	(uint16(DEVMGMT_ID) << 8) + uint16(DEVMGMT_MSG_RTC_ALARM_IND): func() WiModMessageInd { return NewRTCAlarmInd() },
}

func IsAlarm(dst, id byte) bool {
	_, ok := alarmConstructors[(uint16(dst)<<8)+uint16(id)]
	return ok
}
